using System.Reflection;
using System.Reflection.Metadata;

namespace Genesis;

// class Person
// {
//     static int minAge = 0;
//     string name;
//     int age;
//     public Person(string name, int age)
//     {
//         this.name = name;
//         this.age = age;
//     }
//     public void Print() => Console.WriteLine($"{name}-{age}");
// }

class Person
{
    public string Name{get;}
    public int Age{get; set;}
    public Person(string name, int age)
    {
        Name = name;
        Age = age;
    }
    public void Print() => Console.WriteLine($"{Name}-{Age}");
}

internal class Program
{
    private static void Main(string[] args)
    {
        Console.WriteLine("<<<<<<<<<< Исследование полей и свойств с помощью рефлексии >>>>>>>>>>");
        Type myType = typeof(Person);
        Person tom = new Person("Tom", 37);
        // получаем свойство Age
        var ageProp = myType.GetProperty("Age");
        // получаем значение свойства Age у объекта tom
        var age = ageProp?.GetValue(tom);
        Console.WriteLine(age); // 37
        // устанавливаем новое значение для свойства Age объекта tom
        ageProp?.SetValue(tom, 22);
        tom.Print();    // Tom - 22

        // Console.WriteLine("Поля:");
        // foreach (PropertyInfo i in myType.GetProperties(
        //     BindingFlags.Instance 
        //     | BindingFlags.NonPublic 
        //     | BindingFlags.Public 
        //     | BindingFlags.Static))
        // {
        //     Console.WriteLine($"{i.PropertyType} {i.Name}");
        //     if(i.CanRead) Console.WriteLine("Set;");
        //     Console.WriteLine(")");
        // }
 
                 
    }

}

    
        




