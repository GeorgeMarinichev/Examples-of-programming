using System.Collections;//Директива

namespace Genesis;

///////////////////////////////////////////////////////////////////////////
class Numbers
{
    public IEnumerator<int> GetEnumerator()
    {
        for (int i = 0; i < 10; i++)
        {
            yield return i * i;
        }
    }
}

static class Int32Extetion
{
    public static IEnumerator<int> GetEnumerator(this int number)
    {
        int k = (number > 0) ? number : 0;
        for (int i = number -k; i <= k; i++)
        {
            yield return i;
        }
    }
}
///////////////////////////////////////////////////////////////////////////

class Person
{
    public string Name {get;}
    public Person(string name)
    {
        Name = name;
    }
}

//class Company
//{
//    Person[] personnel;
//    public Company(Person[] personnel)
//    {
//        this.personnel = personnel;   
//    }
//    public int Length => personnel.Length;

//    //public IEnumerator<Person> GetEnumerator()
//    //{
//    //    for (int i = 0; i < personnel.Length; i++)
//    //    {
//    //        yield return personnel[i];
//    //    }
//    //}
//    public IEnumerator<Person> GetEnumerator()
//    {
//        yield return personnel[0];
//        yield return personnel[1];
//        yield return personnel[2];
//    }
//}

class Company//Вариант с именованными итераторами
{
    Person[] personnel;
    public Company(Person[] personnel)
    {
        this.personnel = personnel;
    }
    public int Length => personnel.Length;

    public IEnumerable<Person> GetPersonnel(int max)
    {
        for (int i = 0; i < max; i++)
        {
            if (i == personnel.Length)
            {
                yield break;
            }
            else
            {
                yield return personnel[i];
            }
        }
    }
}

internal class Program
    {
    static void Main(string[] args)
    {
        Console.WriteLine("Итераторы и оператор yield");

        Numbers num = new Numbers();

        foreach (var i in num)
        {
            Console.WriteLine(i);
        }
        Console.WriteLine("==============================================");
        foreach (var n in 5) Console.WriteLine(n);
        foreach (var n in -5) Console.WriteLine(n);
        Console.WriteLine("==============================================");
        var people = new Person[]
        {
            new Person("Tom"),
            new Person("Bob"),
            new Person("Sam")
        };
        var microsoft = new Company(people);

        //foreach (Person i in microsoft)
        //{
        //    Console.WriteLine(i.Name);
        //    Console.WriteLine(i);
        //}

        foreach (Person i in microsoft.GetPersonnel(5))//Вариант с именованными итераторами
        {
            Console.WriteLine(i.Name);
        }



    }


}


