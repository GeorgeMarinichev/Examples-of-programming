using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Reflection;
using System.Security.Claims;
using Microsoft.EntityFrameworkCore;
//using Microsoft.EntityFrameworkCore.Diagnostics;//Логгирование

namespace Space
{
    //[Table("Пункты Меню")]//Переименование таблицы
    public class User//Тип владелец
    {
        public int Id { get; set; }//NOT NULL
        public string? Name { get; set; }//Не обязательное свойство допускающие значение null(nullable-тип)
        public int? Age {get; set;}//Не обязательное свойство допускающие значение null(nullable-тип)

        public string? Discriminator {get; set;}//Столбец Discriminator на уровне БД установлен как readonly(не обязательно!)

        //Навигационные свойства
        
        //Промежуточная таблица
    }

    public class Employee: User
    {
        public int Solary {get; set;}//NOT NULL
    }

    public class Manager: User
    {
        public string? Departament {get; set;}//Не обязательное свойство допускающие значение null(nullable-тип)
    }

//     [ComplexType]//Коплексный тип
//    public class Language
//    {
//         public required string Name {get; set;} //NOT NULL
//    }

 
    public class ApplicationContext: DbContext//Класс контекст данных
    {
        //Чтобы включить все классы из иерархии наследования в базу данных, 
        //в контексте данных для каждого типа должен быть определен набор DbSet.
        public DbSet<User> Users { get; set; } = null!;
        public DbSet<Employee> Employees { get; set; } = null!;
        public DbSet<Manager> Managers { get; set; } = null!;

        // public ApplicationContext()//Конструктор
        // {
        //     //Пересоздание БД
        //     Database.EnsureDeleted();//Очистка БД
        //     Database.EnsureCreated();//Создание БД
        // }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlite("Data Source=helloapp.db");//Подключение
            //optionsBuilder.UseLazyLoadingProxies().UseSqlite("Data Source=helloapp.db");//Подключение LazyLoading
            //optionsBuilder.LogTo(Console.WriteLine, new[] { RelationalEventId.CommandExecuted });//Логгирование
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)//FluentAPI 
        {
            modelBuilder.Entity<User>().UseTphMappingStrategy();//Явное указание что это стратегия TPH(не обязательно указывать!)
        }
    }

    class Program//Основной класс точки входа
    {
        static void Main(string[] args)//Метод как точка входа
        {
            void CreateData()//Создание данных
        {
            using (ApplicationContext db = new ApplicationContext())//Ввод данных
            {
                //Пересоздание БД
                db.Database.EnsureDeleted();//Очистка БД
                db.Database.EnsureCreated();//Создание БД

                //Добавление начальных данных
                User tom = new User {Name = "Tom", Age = 45};
                User sam = new User {Name = "Sam", Age = 55};
                User bob = new User {Name = "Bob", Age = 60};

                db.Users.AddRange(tom, sam, bob);

                //Добавление начальных данных
                Employee emp1 = new Employee{Name = "Eva", Solary = 100};
                Employee emp2 = new Employee{Name = "Bob", Solary = 200};
                db.Employees.AddRange(emp1, emp2);
                
                //Добавление данных
                Manager man1 = new Manager{Name = "Alice", Departament = "IT"};
                Manager man2 = new Manager{Name = "Sam", Departament = "RBT"};
                Manager man3 = new Manager{Name = "Bob", Departament = "Games"};
                db.Managers.AddRange(man1, man2, man3);

                //Сохранение данных
                db.SaveChanges();
            }
        }
            CreateData();//

            void ReadData()//Чтение данных
        {
            using (ApplicationContext db = new ApplicationContext())//Получение данных
            {
                Console.WriteLine($"=========================Base===============================");
                Console.WriteLine("Все пользователи");
                var user1 = db.Users.ToList();// получаем все пункты меню из БД
                foreach (var i in user1)
                {
                    Console.WriteLine($"Id:{i.Id} Name:{i.Name} Age:{i.Age} \n {i.Discriminator}");
                    Console.WriteLine("--------------------------------------");
                }

                Console.WriteLine($"=========================Under===============================");
                Console.WriteLine("\n Все работники");
                var employee = db.Employees.ToList();// получаем определенный пункт меню с подменю   
                foreach(var i in employee)
                {
                    Console.WriteLine($"Name:{i.Name} Solary:{i.Solary}");
                    Console.WriteLine("++++++++++++++++++++++++++++++++++");
                
                    
                }

                Console.WriteLine($"=========================Under2===============================");
                Console.WriteLine("\nВсе менеджеры");
                var manager = db.Managers.ToList();// получаем определенный пункт меню с подменю
                foreach(var i in manager)
                {
                    Console.WriteLine($"Name:{i.Name} Departament:{i.Departament}");
                    Console.WriteLine("++++++++++++++++++++++++++++++++++");
                }       
            }
        }
            Console.WriteLine("Метод вывода до изменений:");
            ReadData();//1

            void UpdateData()//Редактирование данных
        {
            //Изменение данных
            using (ApplicationContext db = new ApplicationContext())//Редактирование данных
            {
                User? user1 = db.Users.FirstOrDefault(u => u.Name == "Tom");//изменение имени пользователя
                if (user1 != null)
                {
                    user1.Name = "Том";
                    db.SaveChanges();
                }
            }
        }
            UpdateData();//

            Console.WriteLine("Метод вывода после изменений:");
            ReadData();//2

            void DeleteData()//Удаление данных
        {
            using (ApplicationContext db = new ApplicationContext())
            {
                User? user1 = db.Users.FirstOrDefault(m => m.Id == 2);
                if (user1 != null)
                {
                    db.Users.Remove(user1);
                    db.SaveChanges();
                }
            }
        }
            DeleteData();//
            Console.WriteLine("Метод вывода после удаления:");
            ReadData();//3
        }
    }
}
