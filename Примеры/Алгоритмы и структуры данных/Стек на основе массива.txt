using System;
using System.Collections;
using System.Collections.Generic;

namespace Space
{
    //public class FixedStack<T>
    //{
    //    private T[] items;//элемент стека
    //    private int count;//колличество элементов
    //    const int n = 10;//колличество элементов в массиве по умолчанию


    //    ///////////////////////////////////////
    //    public FixedStack()//
    //    {
    //        items = new T[n];
    //    }

    //    public FixedStack(int length)//
    //    {
    //        items = new T[length];
    //    }
    //    ////////////////////////////////////////

    //    public bool IsEmpty//Пуст ли стек
    //    {
    //        get { return count == 0; }
    //    }

    //    public int Count//Размер стека
    //    {
    //        get { return count; }
    //    }

    //    //Добавление элемента
    //    public void Push(T item)
    //    {
    //        if (count == items.Length)
    //        {
    //            throw new InvalidOperationException("Переполнение стека!");
    //        }
    //        items[count++] = item;
    //    }

    //    //Извлечение элемента
    //    public T Pop()
    //    {
    //        //Если стек пуст, выбрасываем исключение
    //        if (IsEmpty)
    //        {
    //            throw new InvalidOperationException("Стек пуст");
    //        }

    //        T item = items[--count];
    //        items[count] = item;
    //        items[count] = default(T);//Сбрасываем ссылку
    //        return item;
    //    }

    //    //Возвращаем элемент из верхушки стека
    //    public T Peek()
    //    {
    //    //Если стек пуст, выбрасываем исключение
    //    if(IsEmpty)
    //        {
    //            throw new InvalidOperationException("Стек пуст");
    //        }
    //        return items[count - 1];
    //    }

    public class Stack<T>
    {
        private T[] items;//элемент стека
        private int count;//колличество элементов
        const int n = 10;//колличество элементов в массиве по умолчанию


        ///////////////////////////////////////
        public Stack()//
        {
            items = new T[n];
        }

        public Stack(int length)//
        {
            items = new T[length];
        }
        ////////////////////////////////////////

        public bool IsEmpty//Пуст ли стек
        {
            get { return count == 0; }
        }

        public int Count//Размер стека
        {
            get { return count; }
        }

        //Добавление элемента
        public void Push(T item)
        {
            if (count == items.Length)
            {;
                Resize(items.Length + 10);
            }
            items[count++] = item;
        }

        //Извлечение элемента
        public T Pop()
        {
            //Если стек пуст, выбрасываем исключение
            if (IsEmpty)
            {
                throw new InvalidOperationException("Стек пуст");
            }

            T item = items[--count];
            items[count] = item;
            items[count] = default(T);//Сбрасываем ссылку

            if(count > 0 && count < items.Length - 10)
            {
                Resize(items.Length - 10);
            }
            return item;
        }

        //Возвращаем элемент из верхушки стека
        public T Peek()
        {
            return items[count - 1];
        }

        public void Resize(int max)
        {
            T[] tempItems = new T[max];

            for (int i = 0; i < count; i++)
            {
                tempItems[i] = items[i];
            }
            items = tempItems;
        }
        class Program
        {
            static void Main(string[] args)
            {
                Console.WriteLine("Стек на основе массива");

                try
                {
                    //FixedStack<string> stack = new FixedStack<string>(8);
                    Stack<string> stack = new Stack<string>(8);
                    //
                    stack.Push("Kate");
                    stack.Push("Sam");
                    stack.Push("Alice");
                    stack.Push("Tom");

                    //
                    var head = stack.Pop();
                    Console.WriteLine(head);

                    //
                    head = stack.Peek();
                    Console.WriteLine(head);
                }
                catch(InvalidOperationException ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
        }
    }
}

