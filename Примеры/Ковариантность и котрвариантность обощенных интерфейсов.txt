using System.Security;
using System.Security.Cryptography;
using Genesis;
using static System.Console;

namespace Genesis; // Пространство имен

class Message
{
    public string Text {get; set;}
    public Message(string text)
    {
        Text = text;
    }
}

class EmailMessage: Message
{
    public EmailMessage(string text): base(text){}
}

///////////////////////////////////////////////////////////////////////////
// interface IMessenger<out T> // Ковариантный интерфейс
// {
//     T WriteMessage(string text);
// }


// class EmailMessenger: IMessenger<EmailMessage>
// {
//     public EmailMessage WriteMessage(string text)
//     {
//         return new EmailMessage($"Email:{text}");
//     }
// }
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// interface IMessenger<in T> // Контрвариантный интерфейс
// {
//     void SendMessage(T message);
// }

// class SimpleMessenger: IMessenger<Message>
// {
//     public void SendMessage (Message message)
//     {
//         Console.WriteLine($"Email:{message.Text}");
//     }
// }
////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////
interface IMessenger<in T, out K> // Совмещение ковариантности и контрвариантности
{
    void SendMessage(T message);
    K WriteMessage(string text);
}

class SimpleMessenger: IMessenger<Message, EmailMessage>
{
    public void SendMessage (Message message)
    {
        Console.WriteLine($"Отправляется сообщение:{message.Text}");
    }
    public EmailMessage WriteMessage(string text)
    {
        return new EmailMessage($"Email:{text}");
//     
    }
}

//=============================================================================

class Program // Основной класс программы
{
    
    public static void Main(string[] args)// Основной метод программы
    {
        //BenchmarkRunner.Run<BoxingTest>();

        Console.WriteLine("<<<Ковариантность и котрвариантность обощенных интерфейсов>>>");

        /////////////////////Ковариантный вариант программы/////////////////////
        // IMessenger<Message> outlook = new EmailMessenger();
        // Message message = outlook.WriteMessage("HelloWorld");
        // Console.WriteLine(message.Equals);

        // IMessenger<EmailMessage> emailClient = new EmailMessenger();
        // IMessenger<Message> messenger = emailClient;
        // Message emailMessage = messenger.WriteMessage("Hi!");
        // Console.WriteLine(emailMessage.Text);
        ////////////////////////////////////////////////////////////////////////
        
        /////////////////////Контрвариантный вариант программы/////////////////////
        // IMessenger<EmailMessage> outlook = new SimpleMessenger();
        // outlook.SendMessage(new EmailMessage("Hi!"));

        // IMessenger<Message> telegram = new SimpleMessenger();
        // IMessenger<EmailMessage> emailClient = telegram;
        // emailClient.SendMessage(new EmailMessage("HelloWorld"));
        ////////////////////////////////////////////////////////////////////////
        
        /////////////////////Ковариантный и Контрвариантный вариант программы/////////////////////
        IMessenger<EmailMessage, Message> messenger = new SimpleMessenger();
        Message message = messenger.WriteMessage("HelloWorld");
        System.Console.WriteLine(message.Text);  
        messenger.SendMessage(new EmailMessage("Test"));

        IMessenger<EmailMessage, EmailMessage> outlook = new SimpleMessenger();
        EmailMessage emailMessage = outlook.WriteMessage("Message from Outlook");
        outlook.SendMessage(emailMessage);

        IMessenger<Message, Message> telegram = new SimpleMessenger();
        Message simpleMessage = telegram.WriteMessage("Message from Telegram");
        telegram.SendMessage(simpleMessage);
        // emailClient.SendMessage(new EmailMessage("HelloWorld"));
        ////////////////////////////////////////////////////////////////////////
        
        
        
        
    }
}



