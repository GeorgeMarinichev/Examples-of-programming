using static System.Runtime.InteropServices.JavaScript.JSType;

namespace WebApplication6
{
    public class Program
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("Метод UseWhen");
            var builder = WebApplication.CreateBuilder(args);
            var app = builder.Build();

            //app.UseWhen(context => context.Request.Path == "/time",//если путь запроса"/time"
            //    appBuilder =>
            //    {
            //        //логгируем данные - выводим в консоль приложения
            //        appBuilder.Use(async (context, next) =>
            //        {
            //            var time = DateTime.Now.ToShortTimeString();
            //            Console.WriteLine($"Time:{time}");
            //            await next();//вызываем слудующий компонент
            //        });
            //        appBuilder.Run(async (context) =>//отправляем ответ
            //        {
            //            var time = DateTime.Now.ToShortTimeString();
            //            await context.Response.WriteAsync($"Time:{time}");
            //        });
            //    });
            //app.Run(async (context) =>
            //{
            //    await context.Response.WriteAsync("Hello METANIT.COM");
            //});
            //app.Run();
            ////////////////

            //app.UseWhen(context => context.Request.Path == "/time",//если путь запроса"/time"
            //    appBuilder =>
            //    {
            //        var time = DateTime.Now.ToShortTimeString();
            //        //логгируем данные - выводим в консоль приложения
            //        appBuilder.Use(async (context, next) =>
            //        {
            //            Console.WriteLine($"Time:{time}");
            //            await next();//вызываем слудующий компонент
            //        });
            //        appBuilder.Run(async (context) =>//отправляем ответ
            //        {
            //            await context.Response.WriteAsync($"Time:{time}");
            //        });
            //    });
            //app.Run(async (context) =>
            //{
            //    await context.Response.WriteAsync("Hello METANIT.COM");
            //});
            //app.Run();
            /////////////////


            //app.UseWhen(context => context.Request.Path == "/time",//если путь запроса"/time"
            //    appBuilder =>
            //    {
            //        //логгируем данные - выводим в консоль приложения
            //        appBuilder.Use(async (context, next) =>
            //        {
            //            var time = DateTime.Now.ToShortTimeString();
            //            Console.WriteLine($"Time:{time}");
            //            await next();//вызываем слудующий компонент
            //        });
            //    });
            //app.Run(async (context) =>
            //{
            //    await context.Response.WriteAsync("Hello METANIT.COM");
            //});
            //app.Run();
            ///////////////////


            //app.UseWhen(context => context.Request.Path == "/time",//условие: если путь запроса"/time"
            //    HandleTimeRequest
            //    );
            //app.Run(async (context) =>
            //{
            //    await context.Response.WriteAsync("Hello METANIT.COM");
            //});
            //app.Run();

            //void HandleTimeRequest(IApplicationBuilder appBuilder)//Ветка конвеера в отдельном методе
            //{
            //    appBuilder.Use(async (context, next) =>
            //    {
            //        var time = DateTime.Now.ToShortTimeString();
            //        Console.WriteLine($"Time:{time}");
            //        await next();//вызываем слудующий компонент
            //    });
            //}
            //////////////////////////////////////////////////

            ////////////////Метод MapWhen
            app.MapWhen(context => context.Request.Path == "/time",//условие: если путь запроса"/time"
                HandleTimeRequest
                );
            app.Run(async (context) =>
            {
                await context.Response.WriteAsync("Hello METANIT.COM");
            });
            app.Run();

            void HandleTimeRequest(IApplicationBuilder appBuilder)//Ветка конвеера в отдельном методе
            {
                appBuilder.Run(async (context) =>
                {
                    var time = DateTime.Now.ToShortTimeString();
                    //Console.WriteLine($"Time:{time}");
                    await context.Response.WriteAsync($"Time:{time}");//вызываем слудующий компонент
                });
            }

        }
    }
}
