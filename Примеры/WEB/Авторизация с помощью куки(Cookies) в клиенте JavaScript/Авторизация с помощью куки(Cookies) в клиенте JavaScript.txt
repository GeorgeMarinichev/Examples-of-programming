////////////////////////////Авторизация с помощью куки(Cookies) в клиенте JavaScript
//передачи данных о пользователе в формате json в зашифрованном виде.

using System;
using Microsoft.AspNetCore.Authorization;//Деректива для аутентификации
using System.Security.Claims;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;

// Не обходимый пакет NuGet: Microsoft.AspNetCore.Authentication.JwtBearer, для аутентификации на основе jwt-токенов.

namespace Space
{
    class Program
    {
        record class Person(string Email, string Password);//Для представления пользователя в приложении
        static void Main(string[] args)
        {
            /////////////Аутентификация на основе Cookies.
            
            /////////////////////////////////////Условная БД//////////////////////////
            var people = new List<Person>
            {
                new Person("george@mail.com", "1985"),
                new Person("bob@mail.com", "55555")
            };
            ////////////////////////////////////////////////////////////////////
            //WebApplicationBuilder builder = WebApplication.CreateBuilder();
            var builder = WebApplication.CreateBuilder(args);

            builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)//Добавление сервисов аутентификации
            .AddCookie((options)=> options.LoginPath = "/login");

            builder.Services.AddAuthorization();//Добавление сервисов авторизации
        
            //WebApplication app = builder.Build();
            var app = builder.Build();

            //app.UseDefaultFiles();
            //app.UseStaticFiles();

            app.UseAuthentication();//Добавление middleware аутентификации
            app.UseAuthorization();//Добавление middleware авторизации

            app.MapGet("/login", async(HttpContext context) =>
            {
                context.Response.ContentType = "text/html; charset=utf-8";
                //HTML-форма для ввода логина и пароля
                string loginForm =@"<!DOCTYPE html>
                <html>
                <head>
                    <meta charset='utf-8'/>
                    <title>METANIT.COM</title>
                </head>
                <body>
                    <h2>Login Form</h2>
                    <form method='post'>
                        <p>
                            <label>Email</label><dr />
                            <input name='email' />
                        </p>
                        <p>
                            <label>Password</label><dr />
                            <input type='password' name='password' />
                        </p>
                        <input type='submit' value='Login' />
                    </form>
                </body>
                </html>";
                await context.Response.WriteAsync(loginForm);
            });

            app.MapPost("/login", async(string? returnUrl, HttpContext context)=>
            {
                //Получаем из формы email пароль
                var form = context.Request.Form;
                //Если email и/или пароль не установлены, посылается статус код 400
                if(!form.ContainsKey("email") || !form.ContainsKey("password"))
                {
                    Results.BadRequest("Email и/или пароль не установлены");
                }

                string email = form["email"];
                string password = form["password"];

                //Нахождение пользователя
                Person? person = people.FirstOrDefault(p => p.Email == email && p.Password == password);
                if(person is null)//Если пользователь не найден, отправляется статус код 401
                {
                    Results.Unauthorized();
                }

                var claims = new List<Claim>{new Claim(ClaimTypes.Name, person.Email)};
                //Создание объекта ClaimsIdentity
                ClaimsIdentity claimsIdentity = new ClaimsIdentity(claims, "Cookies");
                //Установка футентификации куки
                await context.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(claimsIdentity));
                return Results.Redirect(returnUrl??"/");
            });

            app.MapGet("/logout", async(HttpContext context)=>
            {
                await context.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
                return Results.Redirect("/login");
            });


            app.Map("/", [Authorize]() => "Hello User");//Ошибка 401, пользователь не аторизован
            //app.Map("/", () => "Hello World!");

            app.Run();
        }
    }
}

