//////////////////////////////Scoped-сервисы Singleton обЪектах 
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;

namespace Space
{
    public interface ITime//Интерфейс(абстракт)
    {
        int Time {get;}//Свойство для чтения(асессоры)
    }

    public class Time: ITime//Реализация интерфейса
    {
        public string Time{get;}

        public Time()
        {
            Time = DateTime.Now.ToLongTimeString();
        }
    }

    public class TimeService//Определение класса сервиса
    {
        private ITime time;

        public TimeService(ITime time)
        {
            this.time = time;
        }

        public string GetTime() => time.Time;
    }

    // public class TimeMiddleware //Опрдение компонента middleware для вывода сервиса
    // {
    //     RequestDelegate next;//Поля
    //     TimeService timeService;//Поля

    //     public TimeMiddleware(RequestDelegate next, TimeService timeService)
    //     {
    //         this.next = next;
    //         this.timeService = timeService;
    //     }


    //     public async Task InvokeAsync(HttpContext httpContext)
    //     {
    //         if(httpContext.Request.Path == "/time")
    //         {
    //             httpContext.Response.ContentType = "text/html; charset=utf-8";//Не должно быть пробелов
    //             httpContext.Response.Headers.ContentLanguage = "ru-RU";
    //             await httpContext.Response.WriteAsync($"Время:{timeService?.Time}");
    //         }
    //         else
    //         {
    //             await next.Invoke(httpContext);
    //         }
    //     }
    // }

    public class TimeMiddleware //Опрдение компонента middleware для вывода сервиса
    {
        TimeService timeService;//Поля
    
        public TimeMiddleware(TimeService timeService)
        {
            this.timeService = timeService;
        }


        public async Task InvokeAsync(HttpContext httpContext)
        {
            httpContext.Response.ContentType = "text/html; charset=utf-8";//Не должно быть пробелов
            httpContext.Response.Headers.ContentLanguage = "ru-RU";
            await httpContext.Response.WriteAsync($"Время:{timeService?.Time}");
        }
    }

   
    public class Program
    {
        static void Main(string[] args)
        {
            // /////////////////////////AddTransient()
            // //WebApplicationBuilder builder = CreateBuilder();
            var builder = WebApplication.CreateBuilder(args);

            builder.Services.AddTransient<ITime, Time>();
           //builder.Services.AddSingleton<TimeService>();  

            var app = builder.Build();

            app.UseMiddleware<TimeMiddleware>();

            app.Run(async(context)=> await context.Response.WriteAsync("Hello, METANIT.COM"));
            app.Run();


            /////////////////////////AddScoped()
            //WebApplicationBuilder builder = CreateBuilder();
            // var builder = WebApplication.CreateBuilder(args);

            // builder.Services.AddScoped<TimeService>();

            // var app = builder.Build();

            // app.UseMiddleware<TimeMiddleware>();
            
            // app.Run(async(context)=> await context.Response.WriteAsync("Hello, METANIT.COM"));
            // app.Run();


            /////////////////////////AddSingleton()
            //WebApplicationBuilder builder = CreateBuilder();
            // var builder = WebApplication.CreateBuilder(args);

            // builder.Services.AddSingleton<TimeService>();

            // var app = builder.Build();
            
            // app.UseMiddleware<TimeMiddleware>();

            // app.Run(async(context)=> await context.Response.WriteAsync("Hello, METANIT.COM"));
            // app.Run();

        }
    }
    
}
