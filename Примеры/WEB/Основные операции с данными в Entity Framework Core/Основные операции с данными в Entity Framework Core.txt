////////////////////////////Основные операции с данными в Entity Framework Core
//Entity Framework Core представляет ORM-решение, которое позволяет автоматически связать классы ЯП C#
//с таблицами в БД. Entity Framework поддерживает большинство СУБД(MS SQL Server, SQLite, MySQL, Postres SQL).
//В данном случае работаем через Entity Framework с БД в MS SQL Server.

using System;
using Microsoft.EntityFrameworkCore;//Подключение директивы фреймворка EntityFrameworkCor

namespace Space//Пространство имен
{
    ///////////////////////////////////////////////////////
    public class User
    {
        public int Id { get; set;} = 0;
        public string Name { get; set;} = "";
        public int Age { get; set;} = 0;
    }
    ///////////////////////////////////////////////////////
    
    public class ApplicationContext: DbContext//
    {
        public DbSet<User> Users { get; set; } = null;
        public ApplicationContext(DbContextOptions<ApplicationContext> options): base(options)
        {
            Database.EnsureCreated();//Создание базы данных при первом обращении
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().HasData(
                new User {Id = 1, Name = "Tom", Age = 37},
                new User {Id = 2, Name = "Bob", Age = 50},
                new User {Id = 3, Name = "Sam", Age = 55}
            );
        }

    }

  
    class Program//Главный класс приложения
    {  
        static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            string connection = "Server=(localdb)\\mssqllocaldb;Database=applicationdb;Trusted_Connection=True";//Получение строки подключения из файла конфигурации
            builder.Services.AddDbContext<ApplicationContext>((options)=> options.UseSqlServer(connection));//Добавление контекста ApplicationContext в качестве сервиса в приложении
            var app = builder.Build();
            
            app.UseDefaultFiles();
            app.UseStaticFiles();

            //Получение данных
            app.MapGet("/api/users", async(ApplicationContext db)=> await db.Users.ToListAsync());
            app.MapGet("/api/users/{id:int}", async(int id, ApplicationContext db)=>
            {
                //Получение пользователя по Id
                User? user = await db.Users.FirstOrDefaultAsync(u => u.Id == id);

                if(user == null)
                {
                    Results.NotFound(new{message = "Пользователь не найден"});//Если ненайден, отправляется статус код 404 и сообщение об ошибке
                }
                else
                {
                    Results.Json(user);//Если найден, отправляется он
                }
            });

            app.MapDelete("/api/users/{id:int}", async(int id, ApplicationContext db)=>
            {
                //Получение пользователя по Id
                User? user = await db.Users.FirstOrDefaultAsync(u => u.Id == id);

                if(user == null)
                {
                    Results.NotFound(new{message = "Пользователь не найден"});//Если ненайден, отправляется статус код 404 и сообщение об ошибке
                }
                else
                {
                    db.Users.Remove(user);//Если найден, удаляется
                    await db.SaveChangesAsync();
                    Results.Json(user);//Если найден, отправляется он
                }
            });

            app.MapPost("api/users", async(User user, ApplicationContext db)=>
            {
                //Добавление пользователя в массив
                await db.Users.AddAsync(user);
                await db.SaveChangesAsync();
                return user;
            });

            app.MapPut("/api/users", async(User userData, ApplicationContext db)=>
            {
                //Получение пользователя по Id
                var user = await db.Users.FirstOrDefaultAsync(u => u.Id == userData.Id);

                if(user == null)
                {
                    Results.NotFound(new{message = "Пользователь не найден"});//Если ненайден, отправляется статус код 404 и сообщение об ошибке
                }
                else
                {
                    user.Name = userData.Name;//Если найден, меняются его данные
                    user.Age = userData.Age;//Если найден, меняются его данные
                    await db.SaveChangesAsync();
                    Results.Json(user);//Если найден, отправляется он
                }
            });


            //app.MapGet("/", ()=> "Hello World");
            app.Run();

        }
     
    }
}
