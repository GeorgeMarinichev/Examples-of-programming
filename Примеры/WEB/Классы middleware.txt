using Microsoft.AspNetCore.Builder;
using System.Reflection.PortableExecutable;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace WebApplication6
{
    //public static class TokenExtensions//Класс метода расширения
    //{
    //    public static IApplicationBuilder UseToken(this IApplicationBuilder builder)
    //    {
    //        return builder.UseMiddleware<TokenMiddleware>();
    //    }
    //}
    //public class TokenMiddleware//Класс 
    //{
    //    private readonly RequestDelegate next;//Только для чтения
    //    public TokenMiddleware(RequestDelegate next)//Контсруктор
    //    {
    //        this.next = next;
    //    }
    //    public async Task InvokeAsync(HttpContext context)
    //    {
    //        var token = context.Request.Query["token"];
    //        if(token!= "12345678")
    //        {
    //            context.Response.StatusCode = 403;
    //            //Console.WriteLine("Token is invalid");
    //            await context.Response.WriteAsync("Token is invalid");
    //        }
    //        else
    //        {
    //            await next.Invoke(context);
    //        }
    //    }
    //}



    public static class TokenExtensions//Класс метода расширения
    {
        public static IApplicationBuilder UseToken(this IApplicationBuilder builder, string pattern)
        {
            return builder.UseMiddleware<TokenMiddleware>(pattern);
        }
    }


    public class TokenMiddleware//Класс 
    {
        private readonly RequestDelegate next;//Только для чтения
        string pattern;
        public TokenMiddleware(RequestDelegate next, string pattern)//Контсруктор
        {
            this.next = next;
            this.pattern = pattern;
        }
        public async Task InvokeAsync(HttpContext context)
        {
            var token = context.Request.Query["token"];
            if (token != pattern)
            {
                context.Response.StatusCode = 403;
                //Console.WriteLine("Token is invalid");
                await context.Response.WriteAsync("Token is invalid");
            }
            else
            {
                await next.Invoke(context);
            }
        }
    }
    public class Program
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("Классы middleware");

            var builder = WebApplication.CreateBuilder(args);
            var app = builder.Build();

            //app.UseMiddleware<TokenMiddleware>();
            //app.Run(async (context) => await context.Response.WriteAsync("Hello METANIT.COM"));
            //app.Run();

            //////////////////////Метод расширения для встраивания middleware
            //app.UseToken();
            //app.Run(async (context) => await context.Response.WriteAsync("Hello METANIT.COM"));
            //app.Run();

            /////////////////////Передача параметров
            app.UseToken("555555");
            app.Run(async (context) => await context.Response.WriteAsync("Hello METANIT.COM"));
            app.Run();

        }
    }
}
e