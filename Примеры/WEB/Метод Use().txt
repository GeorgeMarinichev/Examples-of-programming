using static System.Runtime.InteropServices.JavaScript.JSType;

namespace WebApplication6
{
    public class Program
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("Метод Use()");
            var builder = WebApplication.CreateBuilder(args);
            var app = builder.Build();

            //    string date = "";

            //    app.Use(async (context, next)=>
            //    {
            //        var response = context.Response;
            //        var request = context.Request;

            //        response.Headers.ContentLanguage = "ru-RU";
            //        response.ContentType = "text/html; charset=utf-8";

            //        date = DateTime.Now.ToShortDateString();
            //        await next.Invoke();
            //        Console.WriteLine($"Current date:{date}");
            //        //await context.Response.WriteAsync($"Date:{date}");

            //});
            //    app.Run(async (context) => await context.Response.WriteAsync($"Date:{date}"));

            //    app.Run();

            //////////////////////////////////Отправка ответа(одновременно)
            //app.Use(async (context, next) =>
            //{
            //    await context.Response.WriteAsync("<p>Hello world!</p>");
            //    await next.Invoke();

            //});
            //app.Run(async (context) => await context.Response.WriteAsync("<p>Good bye, World</p>"));
            //app.Run();
            /////////////////////////////////////////////////////////////////////////////////////////


            ////////////////Использование делегата RequestDelegate 
            string date = "";

            //app.Use(async (context, next) =>
            //{
            //var response = context.Response;
            //var request = context.Request;

            //response.Headers.ContentLanguage = "ru-RU";
            //response.ContentType = "text/html; charset=utf-8";

            //    date = DateTime.Now.ToShortDateString();
            //    await next.Invoke(context);//Здесь next-RequestDelegate 
            //    Console.WriteLine($"Current date:{date}");//Date:05.11.2024

            //});
            //app.Run(async (context) => await context.Response.WriteAsync($"Date:{date}"));
            //app.Run();
            /////////////////////////////////////////////////////////////////////////////////

            //////////////////////////////Терминальный компонент middleware

            //app.Use(async (context, next) =>
            //{
            //    string? path = context.Request.Path.Value?.ToLower();
            //    if(path == "/date")
            //    {
            //        await context.Response.WriteAsync($"Date:{DateTime.Now.ToShortDateString()}");
            //    }
            //    else
            //    {
            //        await next.Invoke();
            //    }
            //});
            //app.Run(async (context) => await context.Response.WriteAsync("Hello World!"));
            //app.Run();
            /////////////////Без передачи запроса дальше(лучше использовать из за производительности Run())
            //app.Use(async (HttpContext context, Func<Task> next) =>
            //{
            //    await context.Response.WriteAsync("Hello World!");
            //}); 
            //app.Run();
            ///////////////////////////////////////////////////////////////////////////////////////////

            ////////////////////////////////Внесение компонентов в отдельные методе
            //app.Use(GetMethod);
            //app.Run(async (context) => await context.Response.WriteAsync("Hello World!"));
            //app.Run();

            //async Task GetMethod(HttpContext context, Func<Task> next)
            //{
            //    string? path = context.Request.Path.Value?.ToLower();
            //    if (path == "/date")
            //    {
            //        await context.Response.WriteAsync($"Date:{DateTime.Now.ToShortDateString()}");
            //    }
            //    else
            //    {
            //        await next.Invoke();
            //    }
            //};
            /////////////////////Внесение компонентов в отдельный метод через делегат RequestDelegate
            app.Use(GetMethod);
            app.Run(async (context) => await context.Response.WriteAsync("Hello World!"));
            app.Run();

            async Task GetMethod(HttpContext context, RequestDelegate next)
            {
                string? path = context.Request.Path.Value?.ToLower();
                if (path == "/date")
                {
                    await context.Response.WriteAsync($"Date:{DateTime.Now.ToShortDateString()}");
                }
                else
                {
                    await next.Invoke(context);
                }
            };

        }
    }
}
