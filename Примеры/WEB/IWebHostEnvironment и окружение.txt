using Microsoft.AspNetCore.Builder;
using System.Diagnostics.Eventing.Reader;
using System.Reflection.PortableExecutable;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace WebApplication6
{
    
    public class Program
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("IWebHostEnvironment и окружение");

            var builder = WebApplication.CreateBuilder(args);
            var app = builder.Build();

            app.Environment.EnvironmentName = "Staging";// Меняем значение среды

            app.Environment.EnvironmentName = "TestE";//Меняем значение среды на свое произвольное значение

            //////////////////////Проверка статуса приложения 
            if(app.Environment.IsDevelopment())
            {
                app.Run(async (context) => await context.Response.WriteAsync(@"In Development Stage"));
            }
            else if (app.Environment.IsStaging())
            {
                app.Run(async (context) => await context.Response.WriteAsync("In Staging Stage"));
            }
            else if (app.Environment.IsProduction())
            {
                app.Run(async (context) => await context.Response.WriteAsync("In Production Stage"));
            }
            else if (app.Environment.IsEnvironment("TestE"))
            {
                app.Run(async (context) => await context.Response.WriteAsync("In TestE Stage"));//произвольное значение
            }
            else
            {
                app.Run(async (context) => await context.Response.WriteAsync("No Stage"));
            }

            Console.WriteLine($"{app.Environment.EnvironmentName}");
            app.Run();
            
            

        }
    }
}
