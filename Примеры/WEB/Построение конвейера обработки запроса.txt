using Microsoft.AspNetCore.Builder;
using System.Diagnostics.Eventing.Reader;
using System.Reflection.PortableExecutable;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace WebApplication6
{
    //public static class TokenExtensions//Класс метода расширения
    //{
    //    public static IApplicationBuilder UseToken(this IApplicationBuilder builder)
    //    {
    //        return builder.UseMiddleware<TokenMiddleware>();
    //    }
    //}
    //public class TokenMiddleware//Класс 
    //{
    //    private readonly RequestDelegate next;//Только для чтения
    //    public TokenMiddleware(RequestDelegate next)//Контсруктор
    //    {
    //        this.next = next;
    //    }
    //    public async Task InvokeAsync(HttpContext context)
    //    {
    //        var token = context.Request.Query["token"];
    //        if (token != "12345678")
    //        {
    //            context.Response.StatusCode = 403;
    //            //Console.WriteLine("Token is invalid");
    //            await context.Response.WriteAsync("Token is invalid");
    //        }
    //        else
    //        {
    //            await next.Invoke(context);
    //        }
    //    }
    //}



    //public static class TokenExtensions//Класс метода расширения
    //{
    //    public static IApplicationBuilder UseToken(this IApplicationBuilder builder, string pattern)
    //    {
    //        return builder.UseMiddleware<TokenMiddleware>(pattern);
    //    }
    //}


    //public class TokenMiddleware//Класс 
    //{
    //    private readonly RequestDelegate next;//Только для чтения
    //    string pattern;
    //    public TokenMiddleware(RequestDelegate next, string pattern)//Контсруктор
    //    {
    //        this.next = next;
    //        this.pattern = pattern;
    //    }
    //    public async Task InvokeAsync(HttpContext context)
    //    {
    //        var token = context.Request.Query["token"];
    //        if (token != pattern)
    //        {
    //            context.Response.StatusCode = 403;
    //            //Console.WriteLine("Token is invalid");
    //            await context.Response.WriteAsync("Token is invalid");
    //        }
    //        else
    //        {
    //            await next.Invoke(context);
    //        }
    //    }
    //}
    public class RoutingMiddleware
    {
        public RoutingMiddleware(RequestDelegate _) { }

        public async Task InvokeAsync(HttpContext context)
        {
            string path = context.Request.Path;
            //path = "/about";
            if (path == "/index")
            {
                await context.Response.WriteAsync("Home Page");
            }
            else if (path == "/about")
            {
                await context.Response.WriteAsync("About Page");
            }
            else
            {
                Console.WriteLine("Hello World");
                context.Response.StatusCode = 404;
                
            }
        }
    }

    public class AuthentificationMiddlware
    {
        readonly RequestDelegate next;
        public AuthentificationMiddlware(RequestDelegate next)
        {
            this.next = next;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            var token = context.Request.Query["token"];
            if (string.IsNullOrWhiteSpace(token))
            {
                context.Response.StatusCode = 404;
            }
            else
            {
                await next.Invoke(context);
            }
        }
    }

    public class ErrorHandlingMiddleware
    {

        readonly RequestDelegate next;
        public ErrorHandlingMiddleware(RequestDelegate next)
        {
            this.next = next;
        }
        public async Task InvokeAsunc(HttpContext context)
        {
            await next.Invoke(context);
            if(context.Response.StatusCode == 403)
            {
                await context.Response.WriteAsync("Access Denited");
            }
            else if(context.Response.StatusCode == 404)
            {
                await context.Response.WriteAsync("Not Found");
            }
        }
    }


    public class Program
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("Построение конвейера обработки запроса");

            var builder = WebApplication.CreateBuilder(args);
            var app = builder.Build();

            /////////////////////Передача параметров
            app.UseMiddleware<ErrorHandlingMiddleware>();
            app.UseMiddleware<AuthentificationMiddlware>();
            app.UseMiddleware<RoutingMiddleware>();
            app.Run();

        }
    }
}
