////////////////////////////Авторизация на основе Claims
using System;
using Microsoft.AspNetCore.Authorization;//Деректива для аутентификации
using System.Security.Claims;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using System.Collections.Generic;


namespace Space
{
    record class Person(string Email, string Password, string City, string Company);//Для представления пользователя в приложении

    class Role
    {
        public string Name {get; set;}
        public Role(string name)
        {
            Name = name;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            ///////////////////////Условная БД//////////////////
            var people = new List<Person>
            {
                new Person("george@mail.com", "1985", "Berlin", "Microsoft"),
                new Person("tom@mail.com", "55555", "London", "Google"),
                new Person("sam@mail.com", "666", "Bruclin", "Microsoft")
            };

            WebApplicationBuilder builder = WebApplication.CreateBuilder();
            //var builder = WebApplication.CreateBuilder(args);

            builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)//Добавление сервисов аутентификации
                .AddCookie((options)=>
                {
                    options.LoginPath = "/login";//Путь направления не аутентифицированного пользователя
                    options.AccessDeniedPath = "/login";//Путь направления аутентифицированного пользователя без доступа к ресурсу
                });
            builder.Services.AddAuthorization((opts)=>//Добавление сервисов авторизации
            {
                opts.AddPolicy("OnlyForLondon", policy =>{
                policy.RequireClaim(ClaimTypes.Locality, "London", "Berlin");
                });

                opts.AddPolicy("OnlyForMicrosoft", policy =>{
                policy.RequireClaim(ClaimTypes.Locality, "company", "Microsoft");
                });
            });
            
            WebApplication app = builder.Build();
            //var app = builder.Build();

            app.UseAuthentication();//Добавление middleware аутентификации
            app.UseAuthorization();//Добавление middleware авторизации


            app.MapGet("/accessdenied", async(HttpContext context) =>
            {
                context.Response.StatusCode = 403;
                await context.Response.WriteAsync("Access Denied");
            });

            app.MapGet("/login", async(HttpContext context) =>
            {
                context.Response.ContentType = "text/html; charset=utf-8";
                //HTML-форма для ввода логина и пароля
                string loginForm =@"<!DOCTYPE html>
                <html>
                <head>
                    <meta charset='utf-8'/>
                    <title>METANIT.COM</title>
                </head>
                <body>
                    <h2>Login Form</h2>
                    <form method='post'>
                        <p>
                            <label>Email</label><br />
                            <input name='email' />
                        </p>
                        <p>
                            <label>Password</label><br />
                            <input type='password' name='password' />
                        </p>
                        <input type='submit' value='Login' />
                    </form>
                </body>
                </html>";
                await context.Response.WriteAsync(loginForm);
            });

            app.MapPost("/login", async(string? returnUrl, HttpContext context)=>
            {
                //Получаем из формы email пароль
                var form = context.Request.Form;
                //Если email и/или пароль не установлены, посылается статус код 400
                if(!form.ContainsKey("email") || !form.ContainsKey("password"))
                {
                    Results.BadRequest("Email и/или пароль не установлены");
                }

                string email = form["email"];
                string password = form["password"];

                //Нахождение пользователя
                Person? person = people.FirstOrDefault(p => p.Email == email && p.Password == password);
                if(person is null)//Если пользователь не найден, отправляется статус код 401
                {
                    return Results.Unauthorized();
                }

                var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, person.Email),
                    new Claim(ClaimTypes.Locality, person.City),
                    new Claim("company", person.Company)
                };

                var claimsIdentity = new ClaimsIdentity(claims,"Cookies");//Создание идентичности с типом аутентификации(Undefined-неопределенный). Это может быть произвольная строка
                var claimsPrincipal = new ClaimsPrincipal(claimsIdentity);//Создание обьекта принимающего идентичность claimsIdentity
                //Установка футентификации куки
                await context.SignInAsync(claimsPrincipal);
                return Results.Redirect(returnUrl ??"/");
            });

            //Доступ только для City = London
            app.Map("/london", [Authorize(Policy = "OnlyForLondon")]()=> "You are living in London");

            //Доступ только для Company = Microsoft
            app.Map("/mocrosoft", [Authorize(Policy = "OnlyForMicrosoft")]()=> "You are working in Microsoft");

            //
            app.Map("/", [Authorize](HttpContext context)=>
            {
                var login = context.User.FindFirst(ClaimTypes.Name);
                var city = context.User.FindFirst(ClaimTypes.Locality);
                var company = context.User.FindFirst("company");
                return $"Name:{login?.Value}\nCity:{city?.Value}\nCompany:{company?.Value}";
            });

            app.MapGet("/logout", async(HttpContext context) =>
            {
                await context.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
                return "Данные удалены";
            });

            // //app.Map("/", () => "Hello World!");
            app.Run();

        }
    }
}

