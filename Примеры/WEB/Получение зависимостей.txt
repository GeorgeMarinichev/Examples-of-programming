//Получение зависимостей
//////////////////////////////////////////////////////
using System;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;                   //Необходимый пакет using
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Options;
//////////////////////////////////////////////////////
using System.Text;
using Microsoft.AspNetCore.DataProtection;

namespace Space
{
    ///////////////////////////////////////Создание интерфейса сервиса
    interface ITimeService//Интерфейс (абстракция) сервисов
    {
        string GetTime();//Метод без реализации
    }
    class ShortTimeService: ITimeService// Класс (short-короткий)реализующий интерфейс ITimeService
    {
        public string GetTime()
        {
            return DateTime.Now.ToShortTimeString();
        }
    }

    class LongTimeService: ITimeService// Класс (lohg-длинный) реализующий иетерфейс ITimeService
    {
        public string GetTime() => DateTime.Now.ToLongTimeString();
        
    }


    ////////////////////////////////////Создание класса сервиса без интерфейса(абстракции)
    public class DateService//
    {
        public string GetDate()
        {
            return DateTime.Now.ToShortDateString();
            //return DateTime.Now.ToLongDateString();
        }
    }


    //////////////////////////////////Создание расширяшего класса для добавления сервисов
    public static class ServiceProividerExtensions
    {
        public static void AddService(this IServiceCollection services)
        {
            services.AddTransient<DateService>();
        }
    } 


    /////////////////////////////////Конструкторы классов для внедрения зависимостей
    class TimeMessage
    {
        ITimeService timeService;//Поле
        public TimeMessage(ITimeService timeService)//Конструктор
        {
            this.timeService = timeService;
        }
        public string GetTime()
        {
            return $"Time:{timeService.GetTime()}";
        }
    }


    /////////////////////////////////Метод Invoke/InvokeAsync компонентов контйнера middleware
    // class TimeMessageMiddleware
    // {
    //     private readonly RequestDelegate next;//Поле
    //     public TimeMessageMiddleware(RequestDelegate next)//Конструктор
    //     {
    //         this.next = next;
    //     }
    //     public async Task InvokeAsync(HttpContext context, ITimeService timeService)
    //     {
    //         context.Response.ContentType = "text/html; charset utf-8";
    //         context.Response.Headers.ContentLanguage = "ru-RU";
    //         await context.Response.WriteAsync($"<h2>Time:{timeService?.GetTime()}</h2>");
    //     }
    // }

    class TimeMessageMiddleware//Через конструктор
    {
        RequestDelegate next;//Поле
        ITimeService timeService;
        public TimeMessageMiddleware(RequestDelegate next, ITimeService timeService)//Конструктор
        {
            this.next = next;
            this.timeService = timeService;
        }
        public async Task InvokeAsync(HttpContext context, ITimeService timeService)
        {
            context.Response.ContentType = "text/html; charset utf-8";
            context.Response.Headers.ContentLanguage = "ru-RU";
            await context.Response.WriteAsync($"<h2>Time:{timeService?.GetTime()}</h2>");
        }
    }


    //////////////////////////////////////////////////Установка сервисов
    
    public class Program//Главный класс приложения
    {  
        public static void Main(string[] args)//Главный метод точка входа
        {
            // WebApplicationBuilder builder = WebApplication.CreateBuilder();
            // builder.Services.AddTransient<ITimeService, ShortTimeService>();// Коллекция сервисов короткое время
            // //builder.Services.AddTransient<ITimeService, LongTimeService>();// Коллекция сервисов длинное время
            // builder.Services.AddTransient<DateService>();// Коллекция сервисов короткая дата
     
            // WebApplication app = builder.Build();
            // //var app = builder.Build();

            // //builder.Services.AddTransient<ITimeService, ShortTimeService>();// Коллекция сервисов
        

            // app.Run(async(context)=> 
            // {
            //     var timeService = app.Services.GetService<ITimeService>();
            //     //var dateService = app.Services.GetService<DateService>();
            //     //var dateService = app.Services.GetRequiredService<DateService>();//Метод генерирует исключение в случаяе null
            //     var dateService = context.RequestServices.GetService<DateService>();//Свойство HttpContext.RequestServices
                
            //     //await context.Response.WriteAsync($"Date:{dateService?.GetDate() ?? "Service not available"}");
            //     await context.Response.WriteAsync($"Time:{timeService?.GetTime()}");
            //     await context.Response.WriteAsync($"Date GetService:{dateService.GetDate()}");
            //     //Console.WriteLine("Hello, METANIT.COM");
            // });

            // //app.Run(async context => await context.Response.WriteAsync("Hello, METANIT.COM"));
            // app.Run();

        /////////////////////////////////////////////Установка сервисов с расширением
            // WebApplicationBuilder builder = WebApplication.CreateBuilder();

            // builder.Services.AddService();

            // var app = builder.Build();

            // app.Run(async(context)=>
            // {
            //     var dateService = app.Services.GetService<DateService>();
            //     await context.Response.WriteAsync($"Date:{dateService?.GetDate() ?? "Service not available"}");

            // });
            // app.Run();


            //////////////////////////////////Установка сервисов конструктор класса для внедрения зависимостей
            // WebApplicationBuilder builder = WebApplication.CreateBuilder();
            // //builder.Services.AddTransient<ITimeService, ShortTimeService>();// Коллекция сервисов короткое время
            // //builder.Services.AddTransient<ITimeService, LongTimeService>();// Коллекция сервисов длинное время
        
            // builder.Services.AddTransient<TimeMessage>();//Расширящий класс

            // WebApplication app = builder.Build();


            // app.Run(async(context)=> 
            // {
            //     var timeMessage = app.Services.GetService<TimeMessage>();
            //     //var timeMessage = app.Services.GetRequiredService<TimeMessage>();//Метод генерирует исключение в случаяе null
            //     //var dateMessage = context.RequestServices.GetService<TimeMessage>();//Свойство HttpContext.RequestServices
                
            //     context.Response.ContentType = "text/html; charset = utf-8";
            //     context.Response.Headers.ContentLanguage = "ru-RU";

            //     await context.Response.WriteAsync($"<h2>{timeMessage?.GetTime()}</h2>");

            //     //await context.Response.WriteAsync($"Time:{timeMessage?.GetTime()}");

            //     //Console.WriteLine("Hello, METANIT.COM");
            // });

            // //app.Run(async context => await context.Response.WriteAsync("Hello, METANIT.COM"));
            // app.Run();


            //////////////////////////////////Установка сервисов через метод Invoke/InvokeAsync компонентов контйнера middleware
            WebApplicationBuilder builder = WebApplication.CreateBuilder();
            //builder.Services.AddTransient<ITimeService, ShortTimeService>();// Коллекция сервисов короткое время
            builder.Services.AddTransient<ITimeService, LongTimeService>();// Коллекция сервисов длинное время

            WebApplication app = builder.Build();

            app.UseMiddleware<TimeMessageMiddleware>();//Класс TimeMessageMiddleware

            //app.Run(async context => await context.Response.WriteAsync("Hello, METANIT.COM"));
            app.Run();
        }
    }
}
