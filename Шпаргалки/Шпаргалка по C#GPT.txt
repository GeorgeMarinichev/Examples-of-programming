using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

// Определение перечисления
public enum AnimalType
{
    Dog,
    Cat,
    Bird
}

// Определение интерфейса
public interface IAnimal
{
    void Speak(); // Метод интерфейса
}

// Определение класса, реализующего интерфейс
public class Dog : IAnimal
{
    public string Name { get; set; } // Свойство с автоматической реализацией
    public AnimalType Type { get; set; } // Свойство типа перечисления

    // Конструктор класса
    public Dog(string name)
    {
        Name = name; // Инициализация свойства
        Type = AnimalType.Dog; // Установка типа животного
    }

    // Реализация метода Speak
    public void Speak()
    {
        Console.WriteLine($"{Name} says Woof!");
    }
}

// Определение структуры
public struct Point
{
    public int X; // Поле структуры
    public int Y; // Поле структуры

    // Конструктор структуры
    public Point(int x, int y)
    {
        X = x; // Инициализация поля X
        Y = y; // Инициализация поля Y
    }
}

// Делегат для обработки событий
public delegate void Notify(); 

// Класс, использующий события
public class Process
{
    public event Notify ProcessCompleted; // Событие

    public void StartProcess()
    {
        Console.WriteLine("Process Started!");
        Thread.Sleep(2000); // Имитация длительной операции
        OnProcessCompleted(); // Вызываем событие
    }

    protected virtual void OnProcessCompleted()
    {
        ProcessCompleted?.Invoke(); // Проверяем и вызываем событие
    }
}

class Program
{
    static async Task Main(string[] args) // Асинхронный метод Main
    {
        // Создаем экземпляр класса Dog
        Dog dog = new Dog("Buddy");
        dog.Speak(); // Вызов метода Speak

        // Использование перечисления
        Console.WriteLine($"Animal Type: {dog.Type}");

        // Работа с одномерными массивами
        int[] numbers = { 1, 2, 3, 4, 5 }; // Инициализация одномерного массива
        Console.WriteLine("One-dimensional array:");
        foreach (var number in numbers) // Цикл foreach
        {
            Console.WriteLine(number);
        }

        // Работа с двухмерными массивами
        int[,] twoDimensionalArray = { { 1, 2 }, { 3, 4 }, { 5, 6 } }; // Инициализация двумерного массива
        Console.WriteLine("Two-dimensional array:");
        for (int i = 0; i < twoDimensionalArray.GetLength(0); i++) // Цикл for
        {
            for (int j = 0; j < twoDimensionalArray.GetLength(1); j++) // Вложенный цикл for
            {
                Console.Write(twoDimensionalArray[i, j] + " ");
            }
            Console.WriteLine();
        }

        // Работа с многомерными массивами
        int[,,] threeDimensionalArray = new int[2, 2, 2] // Инициализация трехмерного массива
        {
            { { 1, 2 }, { 3, 4 } },
            { { 5, 6 }, { 7, 8 } }
        };
        Console.WriteLine("Three-dimensional array:");
        for (int i = 0; i < threeDimensionalArray.GetLength(0); i++)
        {
            for (int j = 0; j < threeDimensionalArray.GetLength(1); j++)
            {
                for (int k = 0; k < threeDimensionalArray.GetLength(2); k++)
                {
                    Console.Write(threeDimensionalArray[i, j, k] + " ");
                }
                Console.WriteLine();
            }
        }

        // Работа с зубчатыми массивами
        int[][] jaggedArray = new int[2][]; // Инициализация зубчатого массива
        jaggedArray[0] = new int[] { 1, 2, 3 }; // Первый подмассив
        jaggedArray[1] = new int[] { 4, 5 }; // Второй подмассив
        Console.WriteLine("Jagged array:");
        foreach (var array in jaggedArray) // Цикл foreach для зубчатого массива
        {
            Console.WriteLine(string.Join(", ", array));
        }

        // Работа со списками
        List<string> fruitList = new List<string> { "Apple", "Banana", "Cherry" }; // Инициализация списка
        fruitList.Add("Date"); // Добавление элемента
        Console.WriteLine("Fruits List:");
        for (int i = 0; i < fruitList.Count; i++) // Цикл for
        {
            Console.WriteLine(fruitList[i]);
        }

        // Использование лямбда-выражений
        Func<int, int> square = x => x * x; // Определение лямбда-выражения
        Console.WriteLine($"Square of 5: {square(5)}");

        // Пример с задачами
        await Task.Run(async () =>
        {
            Console.WriteLine("Task is running...");
            await Task.Delay(1000); // Асинхронная задержка
            Console.WriteLine("Task is completed.");
        });

        // Пример работы с событиями
        Process process = new Process();
        process.ProcessCompleted += () => Console.WriteLine("Process has completed!"); // Подписка на событие
        process.StartProcess(); // Запуск процесса

        // Пример использования различных операторов
        int a = 10, b = 5;
        Console.WriteLine($"Addition: {a + b}"); // Сложение
        Console.WriteLine($"Subtraction: {a - b}"); // Вычитание
        Console.WriteLine($"Multiplication: {a * b}"); // Умножение
        Console.WriteLine($"Division: {a / b}"); // Деление
        Console.WriteLine($"Modulus: {a % b}"); // Остаток от деления

        // Пример использования условного оператора
        string result = (a > b) ? "a больше b" : "a не больше b";
        Console.WriteLine(result);

        // Пример использования конструкции if..else
        if (a == b)
        {
            Console.WriteLine("a равно b");
        }
        else if (a > b)
        {
            Console.WriteLine("a больше b");
        }
        else
        {
            Console.WriteLine("a меньше b");
        }

        // Пример использования логических операций
        bool isDog = true;
        bool isCat = false;
        if (isDog && !isCat) // Логическое И и отрицание
        {
            Console.WriteLine("Это собака, а не кошка.");
        }

        // Пример использования оператора switch
        int day = 3;
        string dayName = day switch
        {
            1 => "Понедельник",
            2 => "Вторник",
            3 => "Среда",
            4 => "Четверг",
            5 => "Пятница",
            6 => "Суббота",
            7 => "Воскресенье",
            _ => "Некорректный день"
        };
        Console.WriteLine($"День {day}: {dayName}");

        // Пример использования циклов
        Console.WriteLine("Using different types of loops:");

        // Цикл while
        int index = 0;
        Console.WriteLine("While loop:");
        while (index < numbers.Length)
        {
            Console.WriteLine(numbers[index]);
            index++;
        }

        // Цикл do-while
        index = 0;
        Console.WriteLine("Do-While loop:");
        do
        {
            Console.WriteLine(numbers[index]);
            index++;
        } while (index < numbers.Length);

        Console.WriteLine("Press any key to exit...");
        Console.ReadKey(); // Ожидание нажатия клавиши
    }
}


Подробное объяснение кода:
Перечисления (enum): Мы создали перечисление AnimalType, которое позволяет задавать типы животных. Это улучшает читаемость кода и предотвращает использование "магических" чисел.

Интерфейсы и классы:

Интерфейс IAnimal определяет метод Speak, который реализуется в классе Dog.
Класс Dog имеет свойства Name и Type, которые инициализируются через конструктор.
Структуры: Структура Point содержит два поля X и Y и конструктор для инициализации.

Делегаты и события:

Делегат Notify объявлен для обработки событий.
Класс Process имеет событие ProcessCompleted, которое вызывается после завершения процесса. Метод OnProcessCompleted проверяет, есть ли подписчики на событие, и вызывает их.
В методе Main мы подписываемся на событие с помощью лямбда-выражения и вызываем метод StartProcess.
Массивы:

Одномерные массивы: Инициализация и итерация по одномерному массиву numbers.
Двумерные массивы: Инициализация и итерация по двумерному массиву twoDimensionalArray.
Многомерные массивы: Инициализация и итерация по трехмерному массиву threeDimensionalArray.
Зубчатые массивы: Инициализация и итерация по зубчатому массиву jaggedArray.
Списки: Пример работы со списками, включая добавление элементов и итерацию с помощью цикла for.

Циклы:

Цикл for: Используется для итерации по индексам массивов и списков.
Цикл foreach: Используется для итерации по элементам массивов и списков.
Цикл while: Пример использования цикла while для итерации по массиву.
Цикл do-while: Пример использования цикла do-while, который выполняет тело хотя бы один раз.
Лямбда-выражения: Использование лямбда-выражения для определения функции, возвращающей квадрат числа.

Асинхронные методы:

Метод Main объявлен как async Task, что позволяет использовать await внутри него.
Использование Task.Run и await Task.Delay для асинхронного выполнения кода.
Операторы: Примеры использования арифметических операторов, тернарного оператора, операторов сравнения и логических операций.

Условные выражения:

Использование тернарного оператора для простого условия.
Использование конструкции if..else для проверки условий.
Оператор switch: Пример использования switch для определения названия дня недели на основе его номера.